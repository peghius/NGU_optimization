import datetime as dt
import pandas as pd
import numpy as np

d1 = dt.datetime.today()
print(d1)
# aug_gold_increase = base_cost * n
# aug_time_increase  = base_time * n * allocated energy / 1000 * speed_factor
# upg_gold_increase = base_cost * n**2
# upg_multiplier = 1 + n**2
# tupincrease =
augments = pd.DataFrame.from_dict(
    {"scissors": [1, 1, 10000, 400], "scissors_up": [np.nan, np.nan, 10000000, 400],
     "milk": [1.1, 25, 200000, 6800], "milk_up": [np.nan, np.nan, 500000000, 4800],
     "cannon": [1.2, 625, 4000000, 115600], "cannon_up": [np.nan, np.nan, 25 * 10 ** 9, 57600],
     "shoulder": [1.3, 15625, 80 * 10 ** 7, 1.97 * 10 ** 6],
     "shoulder_up": [np.nan, np.nan, 1.25 * 10 ** 12, 691000],
     "energy": [1.4, 390625, 1.6 * 10 ** 9, 3.34 * 10 ** 7],
     "energy_up": [np.nan, np.nan, 62.5 * 10 ** 12, 8.29 * 10 ** 6]},
    orient='index', columns=["lvl_power", "base_multiplier", "base_cost", "base_time"])

inp = "scissors"
level = 1
level_counter = 0
total_time = dt.timedelta()
delta = dt.timedelta(minutes=20)
time_list = []
time_counter = dt.timedelta()
second = dt.timedelta(seconds=1)
limit = "yes"
limiting = []
while total_time<=delta:
    time_spent = (dt.timedelta(seconds=augments["base_time"]["{}".format(inp)]) * (level) * (1000 / 302186382) / 25870 )
    total_time += time_spent
    time_list.append(str(time_spent))
    level += 1
    if limit == "yes":
        level_counter += 1
        time_counter += time_spent
        if (level%50) == 0 and time_counter<=second:
            total_time = total_time - time_counter + second
            limiting.append(limit)
            limit_counter = 0
            time_counter = dt.timedelta()
        elif (level%50) == 0 and time_counter>second:
            limit = "no"
            limiting.append(limit)

print(level)
print(time_list.__len__())
print(limiting[-1])
print(limiting.__len__())
print(total_time)




