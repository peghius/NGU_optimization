import pandas as pd
import numpy as np
import matplotlib as plt
import seaborn as sns
import datetime as dt


class Stats:
    augments = pd.DataFrame.from_dict(
        {"scissors": [1, 1, 10000, 400], "scissors_up": [np.nan, np.nan, 10000000, 400],
         "milk": [1.1, 25, 200000, 6800], "milk_up": [np.nan, np.nan, 500000000, 4800],
         "cannon": [1.2, 625, 4000000, 115600], "cannon_up": [np.nan, np.nan, 25*10**9, 57600],
         "shoulder": [1.3, 15625, 80*10**7, 1.97*10**6],
         "shoulder_up": [np.nan, np.nan, 1.25*10**12, 691000],
         "energy": [1.4, 390625, 1.6*10**9, 3.34*10**7],
         "energy_up": [np.nan, np.nan, 62.5*10**12, 8.29*10**6]},
        orient='index', columns=["lvl_power", "base_multiplier", "base_cost", "base_time"])

    def __init__(self, speed_float, speed_power, cap, GPS):
        # speed has to be written as the initial number of the total speed bonus, speed power is the absolute
        # power shown in total speed bonus
        self.speed = speed_float*10**(-speed_power-2)
        self.cap = cap
        self.GPS = GPS

    def show_stats(self):
        return print("{} speed factor, {} cap, {} GPS".format("{:.6%}".format(self.speed), self.cap, self.GPS))

    def augment_effect(self, augment,  months=0, days=0, hours=0, minutes=0, seconds=0, microseconds=0   ):
        next_lvl = 1
        starting_time = dt.datetime.today()
        elapsed_time = dt.timedelta()
        total_time = dt.timedelta(months, days, hours, minutes, seconds, microseconds)
        total_cost = 0
        counter = 0
        counter_time = 0
        while elapsed_time <= total_time:
            aug_gold = Stats.augments.base_cost[""].format(augment) * next_lvl
            total_cost = total_cost + aug_gold
            time_spent = (dt.timedelta(Stats.augments.base_time[""].format(augment))/60*100 * next_lvl * (1000 / self.cap) * self.speed)/100*60
            elapsed_time = elapsed_time + time_spent
            next_lvl += 1
            counter += 1
            counter_time = counter_time + time_spent
            if counter==50 and counter_time<1:
                counter_time = 0
                counter = 0
                elapsed_time = round(elapsed_time) + 1

        return print("next level = ", next_lvl, "\n", "elapsed time = ", elapsed_time, "\n", "total cost = ",
                     total_cost, "\n", "next level cost = ", aug_gold)

run = Stats(2.1, 6, 100000000, format(62.5*10**12, "2.3E"))
