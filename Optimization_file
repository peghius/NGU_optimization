import datetime as dt
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib as plt

class Augments:

    augments = pd.DataFrame.from_dict(
        {"scissors": [1, 1, 10000, 400], "scissors_up": [np.nan, np.nan, 10000000, 400],
         "milk": [1.1, 25, 200000, 6800], "milk_up": [np.nan, np.nan, 500000000, 4800],
         "cannon": [1.2, 625, 4000000, 115600], "cannon_up": [np.nan, np.nan, 25 * 10 ** 9, 57600],
         "shoulder": [1.3, 15625, 80 * 10 ** 7, 1.97 * 10 ** 6],
         "shoulder_up": [np.nan, np.nan, 1.25 * 10 ** 12, 691000],
         "energy": [1.4, 390625, 1.6 * 10 ** 9, 3.34 * 10 ** 7],
         "energy_up": [np.nan, np.nan, 62.5 * 10 ** 12, 8.29 * 10 ** 6]},
        orient='index', columns=["lvl_power", "base_multiplier", "base_cost", "base_time"])

    second = dt.timedelta(seconds=1)

    def __init__(self, speed_power, cap, gps):
        self.speed = speed_power / 100
        self.cap = cap
        self.GPS = gps

    def show_stats(self):
        return print("{} speed factor, {} cap, {} GPS".format(self.speed, self.cap, self.GPS))

    def augment_progress(self, aug_choice, energy, hours=0, minutes=0, timeframe=1):
        level = 1
        total_time = dt.timedelta()
        delta = dt.timedelta(hours=hours, minutes=minutes)
        speed_counter = dt.timedelta()
        dataframe_counter = dt.timedelta(minutes=timeframe)
        dataframe_counter_base = dt.timedelta(minutes=timeframe)
        second = dt.timedelta(seconds=1)
        limit = "yes"
        dataset = pd.DataFrame(columns=["time", "cost", "level", "power"])
        total_cost = 0
        while total_time <= delta:
            time_spent = (dt.timedelta(seconds=Augments.augments["base_time"]["{}".format(aug_choice)]) * level
                          * (1000 / energy) / self.speed)
            total_time += time_spent
            next_cost = Augments.augments.base_cost["{}".format(aug_choice)] * level * 0.5
            total_cost = total_cost + next_cost
            level += 1
            power = level ** Augments.augments.lvl_power["{}".format(aug_choice)] * Augments.augments.base_multiplier["{}".format(aug_choice)]
            if total_time >= dataframe_counter:
                row = [total_time, next_cost, level, power]
                dataset = dataset.append(pd.Series(row, index=dataset.columns), ignore_index=True)
                dataframe_counter += dataframe_counter_base
            if limit == "yes":
                speed_counter += time_spent
                if (level % 50) == 0 and speed_counter<=second:
                    total_time = total_time - speed_counter + second
                    speed_counter = dt.timedelta()
                elif (level % 50) == 0 and speed_counter>second:
                    limit = "no"
        return dataset

    def upgrade_progress(self, aug_choice, energy, hours=0, minutes=0, timeframe=1):
        level = 1
        total_time = dt.timedelta()
        delta = dt.timedelta(hours=hours, minutes=minutes)
        speed_counter = dt.timedelta()
        dataframe_counter = dt.timedelta(minutes=timeframe)
        dataframe_counter_base = dt.timedelta(minutes=timeframe)
        second = dt.timedelta(seconds=1)
        limit = "yes"
        dataset = pd.DataFrame(columns=["time", "up_cost", "up_level", "bonus"])
        total_cost = 0
        print(total_cost)
        while total_time <= delta:
            time_spent = (dt.timedelta(seconds=Augments.augments["base_time"]["{}".format(aug_choice)]) * level
                          * (1000 / energy) / self.speed)
            total_time += time_spent
            next_cost = (Augments.augments.base_cost["{}".format(aug_choice)] * level**2) * 0.5
            total_cost = total_cost + next_cost
            level += 1
            multiplier = 1 + level**2
            if total_time >= dataframe_counter:
                row = [total_time, next_cost, level, multiplier]
                dataset = dataset.append(pd.Series(row, index=dataset.columns), ignore_index=True)
                dataframe_counter += dataframe_counter_base
            if limit == "yes":
                speed_counter += time_spent
                if (level % 50) == 0 and speed_counter<=second:
                    total_time = total_time - speed_counter + second
                    speed_counter = dt.timedelta()
                elif (level % 50) == 0 and speed_counter>second:
                    limit = "no"
        return dataset

    @staticmethod
    def combine(dataset1, dataset2):
        dataset2 = dataset2.drop(columns="time")
        dataset = pd.concat([dataset1, dataset2], axis=1)
        dataset["tot_power"] = dataset1.power * dataset2.bonus
        dataset["tot_gold"] = dataset1.cost + dataset2.up_cost
        return dataset

    @staticmethod
    def graph_single(dataset):
        plot = sns.lineplot(x="time", y="tot_power", data=dataset)
        plot2 = sns.lineplot(x="time", y="tot_gold", data=dataset)
        return plt.pyplot.show()


start = dt.datetime.today()
run = Augments(2578000, 302285994, 1*10**20)

scissors = run.augment_progress("scissors", 150000000, hours=1, timeframe=5)
scissors_up = run.upgrade_progress("scissors_up", 150000000, hours=1, timeframe=5)
combination = Augments.combine(scissors, scissors_up)
combination.to_csv(r"C:\Users\lucaf\Desktop\NGU_Optimization\Test_dataset.csv")
plot = Augments.graph_single(combination)

print(combination)


